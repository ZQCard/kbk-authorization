// Code generated by entproto. DO NOT EDIT.
syntax = "proto3";

package authorization.v1;

import "google/api/annotations.proto";

import "validate/validate.proto";

import "openapiv3/annotations.proto";

import "google/protobuf/empty.proto";

option go_package = "repo.exmaple.com/authorization/api/v1/authorization";

option (openapi.v3.document) = {
    info: {
        title: "权限服务",
        version: "0.0.1",
        contact: {
            name: "card",
            url: "",
            email: "445864742@qq.com"
        },
        description: "权限服务";
    },
};

// 示例服务
service AuthorizationService {
    // 检查权限
	rpc CheckAuthorization (CheckAuthorizationReq) returns (google.protobuf.Empty){
        option (google.api.http) = { 
            get:"/auth"  
        };
    };
    // 全部角色
    rpc GetRoleAll(google.protobuf.Empty) returns(GetRoleAllRes){
        option (google.api.http) = { 
            get:"/roleAll"  
        };
    };

    // 角色创建
    rpc CreateRole(CreateRoleReq) returns(Role){
        option (google.api.http) = { 
            post:"/role"  
            body:"*"
        };
    };

    // 角色更新
    rpc UpdateRole(UpdateRoleReq) returns(google.protobuf.Empty){
        option (google.api.http) = { 
            put:"/role"  
            body:"*"
        };
    };

    // 角色删除
    rpc DeleteRole(DeleteRoleReq) returns(google.protobuf.Empty){
        option (google.api.http) = { 
            delete:"/role"  
        };
    };

    
    // 用户角色 - 列表
	rpc GetRolesForUser (GetRolesForUserReq) returns (GetRolesForUserRes){
        option (google.api.http) = { 
            get:"/getRolesForUser"  
        };
    };

    // 角色用户 - 列表
	rpc GetUsersForRole (RoleNameReq) returns (GetUsersForRoleRes){
        option (google.api.http) = { 
            get:"/getUsersForRole"  
        };
    };

	// 用户角色 - 设置
	rpc SetRolesForUser (SetRolesForUserReq) returns (google.protobuf.Empty){
        option (google.api.http) = { 
            post:"/setRolesForUser"  
            body:"*"
        };
    };

	// 用户角色 - 删除(单个)
	rpc DeleteRoleForUser (DeleteRoleForUserReq) returns (google.protobuf.Empty){
        option (google.api.http) = { 
            delete:"/deleteRoleForUser"  
        };
    };

	// 用户角色 - 删除(全部) 
	rpc DeleteRolesForUser (DeleteRolesForUserReq) returns (google.protobuf.Empty){
        option (google.api.http) = { 
            delete:"/deleteRolesForUser"  
        };
    };

	// 角色权限策略 - 列表
	rpc GetPolicies (RoleNameReq) returns (GetPoliciesRes){
        option (google.api.http) = { 
            get:"/getPolicies"  
        };
    };

	// 角色权限策略 - 设置
	rpc UpdatePolicies (UpdatePoliciesReq) returns (google.protobuf.Empty){
        option (google.api.http) = { 
            post:"/updatePolicies"  
            body:"*"
        };
    };
    
    // Api列表
    rpc GetApiListAll(google.protobuf.Empty) returns(GetApiListAllRes){
        option (google.api.http) = { 
            get:"/apiAll"  
        };
    };

    // Api列表
    rpc GetApiList(GetApiListReq) returns(GetApiListPageRes){
        option (google.api.http) = { 
            get:"/apis"  
        };
    };

    // Api创建
    rpc CreateApi(CreateApiReq) returns(Api){
        option (google.api.http) = { 
            post:"/api"  
            body:"*"
        };
    };

    // Api更新
    rpc UpdateApi(UpdateApiReq) returns(google.protobuf.Empty){
        option (google.api.http) = { 
            put:"/api"  
            body:"*"
        };
    };

    // Api删除
    rpc DeleteApi(DeleteApiReq) returns(google.protobuf.Empty){
        option (google.api.http) = { 
            delete:"/api"  
        };
    };


    // 菜单列表 - 全部
	rpc GetMenuAll (google.protobuf.Empty) returns (GetMenuTreeRes){
        option (google.api.http) = { 
            get:"/menuAll"  
        };
    };
	// 菜单列表 - 树状结构
	rpc GetMenuTree (google.protobuf.Empty) returns (GetMenuTreeRes){
        option (google.api.http) = { 
            get:"/menuTree"  
        };
    };

	// 菜单 - 创建
	rpc CreateMenu (CreateMenuReq) returns (Menu){
        option (google.api.http) = { 
            post:"/menu"  
            body:"*"
        };
    };

	// 菜单 - 更新
	rpc UpdateMenu (UpdateMenuReq) returns (google.protobuf.Empty){
        option (google.api.http) = { 
            put:"/menu"  
            body:"*"
        };
    };

	// 菜单 - 删除
	rpc DeleteMenu (IdReq) returns (google.protobuf.Empty){
        option (google.api.http) = { 
            delete:"/menu"  
        };
    };

	// 角色菜单 - 树状结构
	rpc GetRoleMenuTree (RoleNameReq) returns (GetMenuTreeRes){
        option (google.api.http) = { 
            get:"/roleMenuTree"  
        };
    };

	// 角色菜单 - 列表
	rpc GetRoleMenu (RoleNameReq) returns (GetMenuTreeRes){
        option (google.api.http) = { 
            get:"/roleMenu"  
        };
    };

	// 角色菜单 - 更新
	rpc SaveRoleMenu (SaveRoleMenuReq) returns (google.protobuf.Empty){
        option (google.api.http) = { 
            post:"/roleMenu"  
            body:"*"
        };
    };

	// 角色菜单按钮 - 列表
	rpc GetRoleMenuBtn (GetRoleMenuBtnReq) returns (GetRoleMenuBtnRes){
        option (google.api.http) = { 
            get:"/roleMenuBtn"  
        };
    };
	// 角色菜单按钮 - 保存
	rpc SaveRoleMenuBtn (SaveRoleMenuBtnReq) returns (google.protobuf.Empty){
        option (google.api.http) = { 
            post:"/roleMenuBtn"  
            body:"*"
        };
    };
}

// 检查权限
message CheckAuthorizationReq {
	// 主题
    string sub = 1;
    // 操作对象
	string obj = 2;
    // 操作行为
	string act = 3;
}

// 响应 - 角色列表(所有)
message  GetRoleAllRes {
    // 列表
    repeated Role list = 1;
}

// 请求 - 角色分页列表
message  GetRoleListReq {
    // 主键id
    int64 page = 1 [
        (validate.rules).int64.gt = 0
    ];

    // 页记录数
    int64 pageSize = 2 [
        (validate.rules).int64.gt = 0
    ];

    // 名称
    string name = 3;
}

// 请求 - 角色更新
message UpdateRoleReq {
    // 主键id
    int64 id = 1 [
        (validate.rules).int64.gt = 0
    ];
    // 名称
    string name = 2 [
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
}

// 请求 - 角色创建
message CreateRoleReq {
    // 名称
    string name = 1 [
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
}
// 响应 - 角色信息
message Role {
    // 主键id
    int64 id = 1;
    // 名称
    string name = 2;
    string created_at = 4;
    // 更新时间
    string updated_at = 5;
}

// 响应 - 角色分页
message  GetRoleListPageRes {
    // 总数
    int64 total = 1;
    // 列表
    repeated Role list = 2;
}

// 请求 - 角色删除
message DeleteRoleReq {
    // 主键id
    int64 id = 1;
}

// 响应 - API列表(所有)
message  GetApiListAllRes {
    // 列表
    repeated Api list = 1;
}

// 请求 - API分页列表
message  GetApiListReq {
    // 主键id
    int64 page = 1 [
        (validate.rules).int64.gt = 0
    ];

    // 页记录数
    int64 pageSize = 2 [
        (validate.rules).int64.gt = 0
    ];
    // 名称
    string name = 3;
    // 分组
    string group = 4;
    // 请求方式
    string method = 5;
    // 请求路径
    string path = 6;
}

// 请求 - API更新
message UpdateApiReq {
    // 主键id
    int64 id = 1 [
        (validate.rules).int64.gt = 0
    ];
    // 名称
    string name = 2 [
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
    // 分组
    string group = 3 [
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
    // 请求方式
    string method = 4 [
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
    // 请求路径
    string path = 5 [
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
}

// 请求 - API创建
message CreateApiReq {
    // 名称
    string name = 1 [
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
    // 分组
    string group = 2 [
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
    // 请求方式
    string method = 3 [
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
    // 请求路径
    string path = 4 [
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
}

// 响应 - API信息
message Api {
    // 主键id
    int64 id = 1;
    // 名称
    string name = 2;
     // 分组
     string group = 3;
     // 请求方式
    string method = 4;
     // 请求路径
    string path = 5;
    // 创建时间
    string created_at = 6;
    // 更新时间
    string updated_at = 7;
    // 域
    string domain = 8;
}

// 响应 - API分页
message  GetApiListPageRes {
    // 总数
    int64 total = 1;
    // 列表
    repeated Api list = 2;
}

// 请求 - API删除
message DeleteApiReq {
    // 主键id
    int64 id = 1;
}

// 请求 - 设置用户角色
message SetRolesForUserReq {
    // 用户名
	string username = 1[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
    // 角色数组
	repeated string roles = 2[
        (validate.rules).repeated.min_items = 1    
    ];
}

// 请求 - 获取用户角色列表
message GetRolesForUserReq {
    // 用户名
	string username = 1[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
}

// 响应 - 用户角色列表
message GetRolesForUserRes {
	// 角色列表
	repeated string roles = 1;
}

// 响应 - 角色用户列表
message GetUsersForRoleRes {
	// 用户列表
	repeated string users = 1;
}

// 请求 - 删除用户(全部)角色
message DeleteRolesForUserReq{
	// 用户名
	string username = 1[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
}

// 请求 - 删除用户(单个)角色
message DeleteRoleForUserReq{
	// 用户名
	string username = 1[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
	// 角色名
	string role = 2[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
}

// 响应 - 权限策略列表
message GetPoliciesRes{
	repeated PolicyRules policyRules = 1;
}

// 响应 - 权限策略
message PolicyRules {
	// operation路径
	string path = 1;
	// 请求方式
	string method = 2;
}

// 请求 - 权限策略更新
message UpdatePoliciesReq {
	// 角色名
	string role = 1[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
	// 权限策略
	repeated PolicyRules policyRules = 2[
        (validate.rules).repeated.min_items = 1    
    ];
}

// 响应 - 菜单树列表
message GetMenuTreeRes {
    // 菜单列表
	repeated Menu list = 1;
}


// 响应 - 菜单详情
message Menu {
	// 主键id
	int64 id = 1;
	// 父级id
	int64 parent_id = 2;
	// 前端路径
	string path = 3;
	// 菜单名
	string name = 4;
	// 是否隐藏
	bool hidden = 5;
	// 前端文件路径
	string component = 6;
	// 排序
	int64 sort = 7;
	// 页面名称
	string title = 8;
	// 菜单图标
	string icon = 9;
    // 创建时间
    string created_at = 10;
    // 更新时间
    string updated_at = 11;
	// 子菜单
	repeated Menu children = 12;
	// 菜单按钮列表
	repeated MenuBtn menuBtns = 13;
	// 父级id字符串 英文逗号分割
	string parent_ids = 14;
}


// 响应 - 菜单按钮详情
message MenuBtn {
	// 主键id
	int64 id = 1;
	// 菜单id
	int64 menu_id = 2;
	// 按钮名称
	string name = 3;
	// 描述
	string description = 4;
	// 英文标识
	string identifier = 5;
    // 创建时间
    string created_at = 6;
    // 更新时间
    string updated_at = 7;
}


// 请求 - 菜单创建
message CreateMenuReq {
	// 父级id
	int64 parent_id = 2;
	// 前端路径
	string path = 3[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
	// 菜单名
	string name = 4[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
	// 是否隐藏
	bool hidden = 5;
	// 前端文件路径
	string component = 6[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
	// 排序
	int64 sort = 7[
        (validate.rules).int64.gt = 0
    ];
	// 页面名称
	string title = 8[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
	// 菜单图标
	string icon = 9[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
	// 菜单按钮列表
	repeated MenuBtn menuBtns = 13;
	// 父级id字符串 英文逗号分割
	string parent_ids = 14[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
}

// 请求 - 菜单更新
message UpdateMenuReq {
    // 主键id
	int64 id = 1[
        (validate.rules).int64.gt = 0
    ];
	// 父级id
	int64 parent_id = 2;
	// 前端路径
	string path = 3[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
	// 菜单名
	string name = 4[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
	// 是否隐藏
	bool hidden = 5;
	// 前端文件路径
	string component = 6[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
	// 排序
	int64 sort = 7[
        (validate.rules).int64.gt = 0
    ];
	// 页面名称
	string title = 8[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
	// 菜单图标
	string icon = 9[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
	// 菜单按钮列表
	repeated MenuBtn menuBtns = 13;
	// 父级id字符串 英文逗号分割
	string parent_ids = 14[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
}

// 请求 - id主键
message IdReq {
	// 主键id
	int64 id = 1;
}

// 请求 - 设置角色菜单
message SaveRoleMenuReq{
    // 角色id
	int64 role_id = 1[
        (validate.rules).int64.gt = 0
    ];
    // 菜单id数组
	repeated int64 menu_ids = 2[
        (validate.rules).repeated.min_items = 1    
    ];
}

// 请求 - 获取角色菜单按钮
message GetRoleMenuBtnReq {
    // 角色id
	int64 role_id = 1;
    // 角色名称
    string role_name = 2;
    // 菜单id
	int64 menu_id = 3;
}

// 响应 - 角色菜单按钮列表
message GetRoleMenuBtnRes {
    // 菜单按钮列表
	repeated MenuBtn list = 1;
}

// 请求 - 角色菜单按钮保存
message SaveRoleMenuBtnReq {
    // 角色id
	int64 role_id = 1[
        (validate.rules).int64.gt = 0
    ];
    // 菜单id
	int64 menu_id = 2[
        (validate.rules).int64.gt = 0
    ];
    // 按钮id数组
	repeated int64 menu_btn_ids = 3[
        (validate.rules).repeated.min_items = 1    
    ];
}

// 请求 - 角色名称
message RoleNameReq {
    string role = 1[
        (validate.rules).string = {min_len: 1, max_len: 255}
    ];
}