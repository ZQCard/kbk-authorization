// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: authorization/v1/authorization.proto

package authorization

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CheckAuthorizationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckAuthorizationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckAuthorizationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckAuthorizationReqMultiError, or nil if none found.
func (m *CheckAuthorizationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckAuthorizationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sub

	// no validation rules for Obj

	// no validation rules for Act

	if len(errors) > 0 {
		return CheckAuthorizationReqMultiError(errors)
	}

	return nil
}

// CheckAuthorizationReqMultiError is an error wrapping multiple validation
// errors returned by CheckAuthorizationReq.ValidateAll() if the designated
// constraints aren't met.
type CheckAuthorizationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckAuthorizationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckAuthorizationReqMultiError) AllErrors() []error { return m }

// CheckAuthorizationReqValidationError is the validation error returned by
// CheckAuthorizationReq.Validate if the designated constraints aren't met.
type CheckAuthorizationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckAuthorizationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckAuthorizationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckAuthorizationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckAuthorizationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckAuthorizationReqValidationError) ErrorName() string {
	return "CheckAuthorizationReqValidationError"
}

// Error satisfies the builtin error interface
func (e CheckAuthorizationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckAuthorizationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckAuthorizationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckAuthorizationReqValidationError{}

// Validate checks the field values on GetRoleAllRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRoleAllRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleAllRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRoleAllResMultiError, or
// nil if none found.
func (m *GetRoleAllRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleAllRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRoleAllResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRoleAllResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRoleAllResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetRoleAllResMultiError(errors)
	}

	return nil
}

// GetRoleAllResMultiError is an error wrapping multiple validation errors
// returned by GetRoleAllRes.ValidateAll() if the designated constraints
// aren't met.
type GetRoleAllResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleAllResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleAllResMultiError) AllErrors() []error { return m }

// GetRoleAllResValidationError is the validation error returned by
// GetRoleAllRes.Validate if the designated constraints aren't met.
type GetRoleAllResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleAllResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleAllResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleAllResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleAllResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleAllResValidationError) ErrorName() string { return "GetRoleAllResValidationError" }

// Error satisfies the builtin error interface
func (e GetRoleAllResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleAllRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleAllResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleAllResValidationError{}

// Validate checks the field values on GetRoleListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRoleListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRoleListReqMultiError,
// or nil if none found.
func (m *GetRoleListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := GetRoleListReqValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := GetRoleListReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	if len(errors) > 0 {
		return GetRoleListReqMultiError(errors)
	}

	return nil
}

// GetRoleListReqMultiError is an error wrapping multiple validation errors
// returned by GetRoleListReq.ValidateAll() if the designated constraints
// aren't met.
type GetRoleListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleListReqMultiError) AllErrors() []error { return m }

// GetRoleListReqValidationError is the validation error returned by
// GetRoleListReq.Validate if the designated constraints aren't met.
type GetRoleListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleListReqValidationError) ErrorName() string { return "GetRoleListReqValidationError" }

// Error satisfies the builtin error interface
func (e GetRoleListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleListReqValidationError{}

// Validate checks the field values on UpdateRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateRoleReqMultiError, or
// nil if none found.
func (m *UpdateRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateRoleReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := UpdateRoleReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateRoleReqMultiError(errors)
	}

	return nil
}

// UpdateRoleReqMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleReqMultiError) AllErrors() []error { return m }

// UpdateRoleReqValidationError is the validation error returned by
// UpdateRoleReq.Validate if the designated constraints aren't met.
type UpdateRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleReqValidationError) ErrorName() string { return "UpdateRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleReqValidationError{}

// Validate checks the field values on CreateRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateRoleReqMultiError, or
// nil if none found.
func (m *CreateRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := CreateRoleReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateRoleReqMultiError(errors)
	}

	return nil
}

// CreateRoleReqMultiError is an error wrapping multiple validation errors
// returned by CreateRoleReq.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleReqMultiError) AllErrors() []error { return m }

// CreateRoleReqValidationError is the validation error returned by
// CreateRoleReq.Validate if the designated constraints aren't met.
type CreateRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleReqValidationError) ErrorName() string { return "CreateRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleReqValidationError{}

// Validate checks the field values on Role with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Role) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Role with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RoleMultiError, or nil if none found.
func (m *Role) ValidateAll() error {
	return m.validate(true)
}

func (m *Role) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return RoleMultiError(errors)
	}

	return nil
}

// RoleMultiError is an error wrapping multiple validation errors returned by
// Role.ValidateAll() if the designated constraints aren't met.
type RoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleMultiError) AllErrors() []error { return m }

// RoleValidationError is the validation error returned by Role.Validate if the
// designated constraints aren't met.
type RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleValidationError) ErrorName() string { return "RoleValidationError" }

// Error satisfies the builtin error interface
func (e RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleValidationError{}

// Validate checks the field values on GetRoleListPageRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRoleListPageRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleListPageRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoleListPageResMultiError, or nil if none found.
func (m *GetRoleListPageRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleListPageRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRoleListPageResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRoleListPageResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRoleListPageResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetRoleListPageResMultiError(errors)
	}

	return nil
}

// GetRoleListPageResMultiError is an error wrapping multiple validation errors
// returned by GetRoleListPageRes.ValidateAll() if the designated constraints
// aren't met.
type GetRoleListPageResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleListPageResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleListPageResMultiError) AllErrors() []error { return m }

// GetRoleListPageResValidationError is the validation error returned by
// GetRoleListPageRes.Validate if the designated constraints aren't met.
type GetRoleListPageResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleListPageResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleListPageResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleListPageResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleListPageResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleListPageResValidationError) ErrorName() string {
	return "GetRoleListPageResValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoleListPageResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleListPageRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleListPageResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleListPageResValidationError{}

// Validate checks the field values on DeleteRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRoleReqMultiError, or
// nil if none found.
func (m *DeleteRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteRoleReqMultiError(errors)
	}

	return nil
}

// DeleteRoleReqMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleReqMultiError) AllErrors() []error { return m }

// DeleteRoleReqValidationError is the validation error returned by
// DeleteRoleReq.Validate if the designated constraints aren't met.
type DeleteRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleReqValidationError) ErrorName() string { return "DeleteRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleReqValidationError{}

// Validate checks the field values on GetApiListAllRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetApiListAllRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApiListAllRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetApiListAllResMultiError, or nil if none found.
func (m *GetApiListAllRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApiListAllRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetApiListAllResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetApiListAllResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetApiListAllResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetApiListAllResMultiError(errors)
	}

	return nil
}

// GetApiListAllResMultiError is an error wrapping multiple validation errors
// returned by GetApiListAllRes.ValidateAll() if the designated constraints
// aren't met.
type GetApiListAllResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApiListAllResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApiListAllResMultiError) AllErrors() []error { return m }

// GetApiListAllResValidationError is the validation error returned by
// GetApiListAllRes.Validate if the designated constraints aren't met.
type GetApiListAllResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApiListAllResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApiListAllResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApiListAllResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApiListAllResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApiListAllResValidationError) ErrorName() string { return "GetApiListAllResValidationError" }

// Error satisfies the builtin error interface
func (e GetApiListAllResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApiListAllRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApiListAllResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApiListAllResValidationError{}

// Validate checks the field values on GetApiListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetApiListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApiListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetApiListReqMultiError, or
// nil if none found.
func (m *GetApiListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApiListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := GetApiListReqValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := GetApiListReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	// no validation rules for Group

	// no validation rules for Method

	// no validation rules for Path

	if len(errors) > 0 {
		return GetApiListReqMultiError(errors)
	}

	return nil
}

// GetApiListReqMultiError is an error wrapping multiple validation errors
// returned by GetApiListReq.ValidateAll() if the designated constraints
// aren't met.
type GetApiListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApiListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApiListReqMultiError) AllErrors() []error { return m }

// GetApiListReqValidationError is the validation error returned by
// GetApiListReq.Validate if the designated constraints aren't met.
type GetApiListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApiListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApiListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApiListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApiListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApiListReqValidationError) ErrorName() string { return "GetApiListReqValidationError" }

// Error satisfies the builtin error interface
func (e GetApiListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApiListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApiListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApiListReqValidationError{}

// Validate checks the field values on UpdateApiReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateApiReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateApiReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateApiReqMultiError, or
// nil if none found.
func (m *UpdateApiReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateApiReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateApiReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := UpdateApiReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetGroup()); l < 1 || l > 255 {
		err := UpdateApiReqValidationError{
			field:  "Group",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetMethod()); l < 1 || l > 255 {
		err := UpdateApiReqValidationError{
			field:  "Method",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPath()); l < 1 || l > 255 {
		err := UpdateApiReqValidationError{
			field:  "Path",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateApiReqMultiError(errors)
	}

	return nil
}

// UpdateApiReqMultiError is an error wrapping multiple validation errors
// returned by UpdateApiReq.ValidateAll() if the designated constraints aren't met.
type UpdateApiReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateApiReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateApiReqMultiError) AllErrors() []error { return m }

// UpdateApiReqValidationError is the validation error returned by
// UpdateApiReq.Validate if the designated constraints aren't met.
type UpdateApiReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApiReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApiReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApiReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApiReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApiReqValidationError) ErrorName() string { return "UpdateApiReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateApiReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApiReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApiReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApiReqValidationError{}

// Validate checks the field values on CreateApiReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateApiReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateApiReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateApiReqMultiError, or
// nil if none found.
func (m *CreateApiReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateApiReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := CreateApiReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetGroup()); l < 1 || l > 255 {
		err := CreateApiReqValidationError{
			field:  "Group",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetMethod()); l < 1 || l > 255 {
		err := CreateApiReqValidationError{
			field:  "Method",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPath()); l < 1 || l > 255 {
		err := CreateApiReqValidationError{
			field:  "Path",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateApiReqMultiError(errors)
	}

	return nil
}

// CreateApiReqMultiError is an error wrapping multiple validation errors
// returned by CreateApiReq.ValidateAll() if the designated constraints aren't met.
type CreateApiReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateApiReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateApiReqMultiError) AllErrors() []error { return m }

// CreateApiReqValidationError is the validation error returned by
// CreateApiReq.Validate if the designated constraints aren't met.
type CreateApiReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApiReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApiReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApiReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApiReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApiReqValidationError) ErrorName() string { return "CreateApiReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateApiReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApiReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApiReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApiReqValidationError{}

// Validate checks the field values on Api with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Api) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Api with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ApiMultiError, or nil if none found.
func (m *Api) ValidateAll() error {
	return m.validate(true)
}

func (m *Api) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Group

	// no validation rules for Method

	// no validation rules for Path

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for Domain

	if len(errors) > 0 {
		return ApiMultiError(errors)
	}

	return nil
}

// ApiMultiError is an error wrapping multiple validation errors returned by
// Api.ValidateAll() if the designated constraints aren't met.
type ApiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiMultiError) AllErrors() []error { return m }

// ApiValidationError is the validation error returned by Api.Validate if the
// designated constraints aren't met.
type ApiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiValidationError) ErrorName() string { return "ApiValidationError" }

// Error satisfies the builtin error interface
func (e ApiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiValidationError{}

// Validate checks the field values on GetApiListPageRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetApiListPageRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApiListPageRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetApiListPageResMultiError, or nil if none found.
func (m *GetApiListPageRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApiListPageRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetApiListPageResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetApiListPageResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetApiListPageResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetApiListPageResMultiError(errors)
	}

	return nil
}

// GetApiListPageResMultiError is an error wrapping multiple validation errors
// returned by GetApiListPageRes.ValidateAll() if the designated constraints
// aren't met.
type GetApiListPageResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApiListPageResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApiListPageResMultiError) AllErrors() []error { return m }

// GetApiListPageResValidationError is the validation error returned by
// GetApiListPageRes.Validate if the designated constraints aren't met.
type GetApiListPageResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApiListPageResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApiListPageResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApiListPageResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApiListPageResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApiListPageResValidationError) ErrorName() string {
	return "GetApiListPageResValidationError"
}

// Error satisfies the builtin error interface
func (e GetApiListPageResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApiListPageRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApiListPageResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApiListPageResValidationError{}

// Validate checks the field values on DeleteApiReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteApiReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteApiReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteApiReqMultiError, or
// nil if none found.
func (m *DeleteApiReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteApiReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteApiReqMultiError(errors)
	}

	return nil
}

// DeleteApiReqMultiError is an error wrapping multiple validation errors
// returned by DeleteApiReq.ValidateAll() if the designated constraints aren't met.
type DeleteApiReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteApiReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteApiReqMultiError) AllErrors() []error { return m }

// DeleteApiReqValidationError is the validation error returned by
// DeleteApiReq.Validate if the designated constraints aren't met.
type DeleteApiReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApiReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApiReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApiReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApiReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApiReqValidationError) ErrorName() string { return "DeleteApiReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteApiReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApiReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApiReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApiReqValidationError{}

// Validate checks the field values on SetRolesForUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetRolesForUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetRolesForUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetRolesForUserReqMultiError, or nil if none found.
func (m *SetRolesForUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetRolesForUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 1 || l > 255 {
		err := SetRolesForUserReqValidationError{
			field:  "Username",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRoles()) < 1 {
		err := SetRolesForUserReqValidationError{
			field:  "Roles",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetRolesForUserReqMultiError(errors)
	}

	return nil
}

// SetRolesForUserReqMultiError is an error wrapping multiple validation errors
// returned by SetRolesForUserReq.ValidateAll() if the designated constraints
// aren't met.
type SetRolesForUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetRolesForUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetRolesForUserReqMultiError) AllErrors() []error { return m }

// SetRolesForUserReqValidationError is the validation error returned by
// SetRolesForUserReq.Validate if the designated constraints aren't met.
type SetRolesForUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetRolesForUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetRolesForUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetRolesForUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetRolesForUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetRolesForUserReqValidationError) ErrorName() string {
	return "SetRolesForUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetRolesForUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetRolesForUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetRolesForUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetRolesForUserReqValidationError{}

// Validate checks the field values on GetRolesForUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRolesForUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRolesForUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRolesForUserReqMultiError, or nil if none found.
func (m *GetRolesForUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRolesForUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 1 || l > 255 {
		err := GetRolesForUserReqValidationError{
			field:  "Username",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetRolesForUserReqMultiError(errors)
	}

	return nil
}

// GetRolesForUserReqMultiError is an error wrapping multiple validation errors
// returned by GetRolesForUserReq.ValidateAll() if the designated constraints
// aren't met.
type GetRolesForUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRolesForUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRolesForUserReqMultiError) AllErrors() []error { return m }

// GetRolesForUserReqValidationError is the validation error returned by
// GetRolesForUserReq.Validate if the designated constraints aren't met.
type GetRolesForUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRolesForUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRolesForUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRolesForUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRolesForUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRolesForUserReqValidationError) ErrorName() string {
	return "GetRolesForUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetRolesForUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRolesForUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRolesForUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRolesForUserReqValidationError{}

// Validate checks the field values on GetRolesForUserRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRolesForUserRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRolesForUserRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRolesForUserResMultiError, or nil if none found.
func (m *GetRolesForUserRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRolesForUserRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetRolesForUserResMultiError(errors)
	}

	return nil
}

// GetRolesForUserResMultiError is an error wrapping multiple validation errors
// returned by GetRolesForUserRes.ValidateAll() if the designated constraints
// aren't met.
type GetRolesForUserResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRolesForUserResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRolesForUserResMultiError) AllErrors() []error { return m }

// GetRolesForUserResValidationError is the validation error returned by
// GetRolesForUserRes.Validate if the designated constraints aren't met.
type GetRolesForUserResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRolesForUserResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRolesForUserResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRolesForUserResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRolesForUserResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRolesForUserResValidationError) ErrorName() string {
	return "GetRolesForUserResValidationError"
}

// Error satisfies the builtin error interface
func (e GetRolesForUserResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRolesForUserRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRolesForUserResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRolesForUserResValidationError{}

// Validate checks the field values on GetUsersForRoleRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsersForRoleRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersForRoleRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersForRoleResMultiError, or nil if none found.
func (m *GetUsersForRoleRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersForRoleRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUsersForRoleResMultiError(errors)
	}

	return nil
}

// GetUsersForRoleResMultiError is an error wrapping multiple validation errors
// returned by GetUsersForRoleRes.ValidateAll() if the designated constraints
// aren't met.
type GetUsersForRoleResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersForRoleResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersForRoleResMultiError) AllErrors() []error { return m }

// GetUsersForRoleResValidationError is the validation error returned by
// GetUsersForRoleRes.Validate if the designated constraints aren't met.
type GetUsersForRoleResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersForRoleResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersForRoleResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersForRoleResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersForRoleResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersForRoleResValidationError) ErrorName() string {
	return "GetUsersForRoleResValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersForRoleResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersForRoleRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersForRoleResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersForRoleResValidationError{}

// Validate checks the field values on DeleteRolesForUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRolesForUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRolesForUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRolesForUserReqMultiError, or nil if none found.
func (m *DeleteRolesForUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRolesForUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 1 || l > 255 {
		err := DeleteRolesForUserReqValidationError{
			field:  "Username",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteRolesForUserReqMultiError(errors)
	}

	return nil
}

// DeleteRolesForUserReqMultiError is an error wrapping multiple validation
// errors returned by DeleteRolesForUserReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteRolesForUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRolesForUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRolesForUserReqMultiError) AllErrors() []error { return m }

// DeleteRolesForUserReqValidationError is the validation error returned by
// DeleteRolesForUserReq.Validate if the designated constraints aren't met.
type DeleteRolesForUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRolesForUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRolesForUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRolesForUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRolesForUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRolesForUserReqValidationError) ErrorName() string {
	return "DeleteRolesForUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRolesForUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRolesForUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRolesForUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRolesForUserReqValidationError{}

// Validate checks the field values on DeleteRoleForUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleForUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleForUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleForUserReqMultiError, or nil if none found.
func (m *DeleteRoleForUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleForUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 1 || l > 255 {
		err := DeleteRoleForUserReqValidationError{
			field:  "Username",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetRole()); l < 1 || l > 255 {
		err := DeleteRoleForUserReqValidationError{
			field:  "Role",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteRoleForUserReqMultiError(errors)
	}

	return nil
}

// DeleteRoleForUserReqMultiError is an error wrapping multiple validation
// errors returned by DeleteRoleForUserReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteRoleForUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleForUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleForUserReqMultiError) AllErrors() []error { return m }

// DeleteRoleForUserReqValidationError is the validation error returned by
// DeleteRoleForUserReq.Validate if the designated constraints aren't met.
type DeleteRoleForUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleForUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleForUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleForUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleForUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleForUserReqValidationError) ErrorName() string {
	return "DeleteRoleForUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleForUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleForUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleForUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleForUserReqValidationError{}

// Validate checks the field values on GetPoliciesRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetPoliciesRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPoliciesRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetPoliciesResMultiError,
// or nil if none found.
func (m *GetPoliciesRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPoliciesRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPolicyRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPoliciesResValidationError{
						field:  fmt.Sprintf("PolicyRules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPoliciesResValidationError{
						field:  fmt.Sprintf("PolicyRules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPoliciesResValidationError{
					field:  fmt.Sprintf("PolicyRules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPoliciesResMultiError(errors)
	}

	return nil
}

// GetPoliciesResMultiError is an error wrapping multiple validation errors
// returned by GetPoliciesRes.ValidateAll() if the designated constraints
// aren't met.
type GetPoliciesResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPoliciesResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPoliciesResMultiError) AllErrors() []error { return m }

// GetPoliciesResValidationError is the validation error returned by
// GetPoliciesRes.Validate if the designated constraints aren't met.
type GetPoliciesResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPoliciesResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPoliciesResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPoliciesResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPoliciesResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPoliciesResValidationError) ErrorName() string { return "GetPoliciesResValidationError" }

// Error satisfies the builtin error interface
func (e GetPoliciesResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPoliciesRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPoliciesResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPoliciesResValidationError{}

// Validate checks the field values on PolicyRules with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PolicyRules) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyRules with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PolicyRulesMultiError, or
// nil if none found.
func (m *PolicyRules) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyRules) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for Method

	if len(errors) > 0 {
		return PolicyRulesMultiError(errors)
	}

	return nil
}

// PolicyRulesMultiError is an error wrapping multiple validation errors
// returned by PolicyRules.ValidateAll() if the designated constraints aren't met.
type PolicyRulesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyRulesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyRulesMultiError) AllErrors() []error { return m }

// PolicyRulesValidationError is the validation error returned by
// PolicyRules.Validate if the designated constraints aren't met.
type PolicyRulesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyRulesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyRulesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyRulesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyRulesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyRulesValidationError) ErrorName() string { return "PolicyRulesValidationError" }

// Error satisfies the builtin error interface
func (e PolicyRulesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyRules.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyRulesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyRulesValidationError{}

// Validate checks the field values on UpdatePoliciesReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdatePoliciesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePoliciesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePoliciesReqMultiError, or nil if none found.
func (m *UpdatePoliciesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePoliciesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetRole()); l < 1 || l > 255 {
		err := UpdatePoliciesReqValidationError{
			field:  "Role",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPolicyRules()) < 1 {
		err := UpdatePoliciesReqValidationError{
			field:  "PolicyRules",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPolicyRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdatePoliciesReqValidationError{
						field:  fmt.Sprintf("PolicyRules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdatePoliciesReqValidationError{
						field:  fmt.Sprintf("PolicyRules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdatePoliciesReqValidationError{
					field:  fmt.Sprintf("PolicyRules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdatePoliciesReqMultiError(errors)
	}

	return nil
}

// UpdatePoliciesReqMultiError is an error wrapping multiple validation errors
// returned by UpdatePoliciesReq.ValidateAll() if the designated constraints
// aren't met.
type UpdatePoliciesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePoliciesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePoliciesReqMultiError) AllErrors() []error { return m }

// UpdatePoliciesReqValidationError is the validation error returned by
// UpdatePoliciesReq.Validate if the designated constraints aren't met.
type UpdatePoliciesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePoliciesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePoliciesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePoliciesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePoliciesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePoliciesReqValidationError) ErrorName() string {
	return "UpdatePoliciesReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePoliciesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePoliciesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePoliciesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePoliciesReqValidationError{}

// Validate checks the field values on GetMenuTreeRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMenuTreeRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMenuTreeRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetMenuTreeResMultiError,
// or nil if none found.
func (m *GetMenuTreeRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMenuTreeRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMenuTreeResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMenuTreeResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMenuTreeResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMenuTreeResMultiError(errors)
	}

	return nil
}

// GetMenuTreeResMultiError is an error wrapping multiple validation errors
// returned by GetMenuTreeRes.ValidateAll() if the designated constraints
// aren't met.
type GetMenuTreeResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMenuTreeResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMenuTreeResMultiError) AllErrors() []error { return m }

// GetMenuTreeResValidationError is the validation error returned by
// GetMenuTreeRes.Validate if the designated constraints aren't met.
type GetMenuTreeResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMenuTreeResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMenuTreeResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMenuTreeResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMenuTreeResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMenuTreeResValidationError) ErrorName() string { return "GetMenuTreeResValidationError" }

// Error satisfies the builtin error interface
func (e GetMenuTreeResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMenuTreeRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMenuTreeResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMenuTreeResValidationError{}

// Validate checks the field values on Menu with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Menu) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Menu with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MenuMultiError, or nil if none found.
func (m *Menu) ValidateAll() error {
	return m.validate(true)
}

func (m *Menu) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ParentId

	// no validation rules for Path

	// no validation rules for Name

	// no validation rules for Hidden

	// no validation rules for Component

	// no validation rules for Sort

	// no validation rules for Title

	// no validation rules for Icon

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MenuValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MenuValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MenuValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMenuBtns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MenuValidationError{
						field:  fmt.Sprintf("MenuBtns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MenuValidationError{
						field:  fmt.Sprintf("MenuBtns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MenuValidationError{
					field:  fmt.Sprintf("MenuBtns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ParentIds

	if len(errors) > 0 {
		return MenuMultiError(errors)
	}

	return nil
}

// MenuMultiError is an error wrapping multiple validation errors returned by
// Menu.ValidateAll() if the designated constraints aren't met.
type MenuMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuMultiError) AllErrors() []error { return m }

// MenuValidationError is the validation error returned by Menu.Validate if the
// designated constraints aren't met.
type MenuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuValidationError) ErrorName() string { return "MenuValidationError" }

// Error satisfies the builtin error interface
func (e MenuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuValidationError{}

// Validate checks the field values on MenuBtn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MenuBtn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MenuBtn with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MenuBtnMultiError, or nil if none found.
func (m *MenuBtn) ValidateAll() error {
	return m.validate(true)
}

func (m *MenuBtn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for MenuId

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Identifier

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return MenuBtnMultiError(errors)
	}

	return nil
}

// MenuBtnMultiError is an error wrapping multiple validation errors returned
// by MenuBtn.ValidateAll() if the designated constraints aren't met.
type MenuBtnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuBtnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuBtnMultiError) AllErrors() []error { return m }

// MenuBtnValidationError is the validation error returned by MenuBtn.Validate
// if the designated constraints aren't met.
type MenuBtnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuBtnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuBtnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuBtnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuBtnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuBtnValidationError) ErrorName() string { return "MenuBtnValidationError" }

// Error satisfies the builtin error interface
func (e MenuBtnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenuBtn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuBtnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuBtnValidationError{}

// Validate checks the field values on CreateMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateMenuReqMultiError, or
// nil if none found.
func (m *CreateMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ParentId

	if l := utf8.RuneCountInString(m.GetPath()); l < 1 || l > 255 {
		err := CreateMenuReqValidationError{
			field:  "Path",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := CreateMenuReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Hidden

	if l := utf8.RuneCountInString(m.GetComponent()); l < 1 || l > 255 {
		err := CreateMenuReqValidationError{
			field:  "Component",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSort() <= 0 {
		err := CreateMenuReqValidationError{
			field:  "Sort",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 255 {
		err := CreateMenuReqValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetIcon()); l < 1 || l > 255 {
		err := CreateMenuReqValidationError{
			field:  "Icon",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetMenuBtns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateMenuReqValidationError{
						field:  fmt.Sprintf("MenuBtns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateMenuReqValidationError{
						field:  fmt.Sprintf("MenuBtns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateMenuReqValidationError{
					field:  fmt.Sprintf("MenuBtns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if l := utf8.RuneCountInString(m.GetParentIds()); l < 1 || l > 255 {
		err := CreateMenuReqValidationError{
			field:  "ParentIds",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateMenuReqMultiError(errors)
	}

	return nil
}

// CreateMenuReqMultiError is an error wrapping multiple validation errors
// returned by CreateMenuReq.ValidateAll() if the designated constraints
// aren't met.
type CreateMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMenuReqMultiError) AllErrors() []error { return m }

// CreateMenuReqValidationError is the validation error returned by
// CreateMenuReq.Validate if the designated constraints aren't met.
type CreateMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMenuReqValidationError) ErrorName() string { return "CreateMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMenuReqValidationError{}

// Validate checks the field values on UpdateMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateMenuReqMultiError, or
// nil if none found.
func (m *UpdateMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateMenuReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ParentId

	if l := utf8.RuneCountInString(m.GetPath()); l < 1 || l > 255 {
		err := UpdateMenuReqValidationError{
			field:  "Path",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := UpdateMenuReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Hidden

	if l := utf8.RuneCountInString(m.GetComponent()); l < 1 || l > 255 {
		err := UpdateMenuReqValidationError{
			field:  "Component",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSort() <= 0 {
		err := UpdateMenuReqValidationError{
			field:  "Sort",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 255 {
		err := UpdateMenuReqValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetIcon()); l < 1 || l > 255 {
		err := UpdateMenuReqValidationError{
			field:  "Icon",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetMenuBtns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateMenuReqValidationError{
						field:  fmt.Sprintf("MenuBtns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateMenuReqValidationError{
						field:  fmt.Sprintf("MenuBtns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateMenuReqValidationError{
					field:  fmt.Sprintf("MenuBtns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if l := utf8.RuneCountInString(m.GetParentIds()); l < 1 || l > 255 {
		err := UpdateMenuReqValidationError{
			field:  "ParentIds",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateMenuReqMultiError(errors)
	}

	return nil
}

// UpdateMenuReqMultiError is an error wrapping multiple validation errors
// returned by UpdateMenuReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMenuReqMultiError) AllErrors() []error { return m }

// UpdateMenuReqValidationError is the validation error returned by
// UpdateMenuReq.Validate if the designated constraints aren't met.
type UpdateMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMenuReqValidationError) ErrorName() string { return "UpdateMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMenuReqValidationError{}

// Validate checks the field values on IdReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IdReqMultiError, or nil if none found.
func (m *IdReq) ValidateAll() error {
	return m.validate(true)
}

func (m *IdReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return IdReqMultiError(errors)
	}

	return nil
}

// IdReqMultiError is an error wrapping multiple validation errors returned by
// IdReq.ValidateAll() if the designated constraints aren't met.
type IdReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdReqMultiError) AllErrors() []error { return m }

// IdReqValidationError is the validation error returned by IdReq.Validate if
// the designated constraints aren't met.
type IdReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdReqValidationError) ErrorName() string { return "IdReqValidationError" }

// Error satisfies the builtin error interface
func (e IdReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdReqValidationError{}

// Validate checks the field values on SaveRoleMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SaveRoleMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveRoleMenuReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveRoleMenuReqMultiError, or nil if none found.
func (m *SaveRoleMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveRoleMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRoleId() <= 0 {
		err := SaveRoleMenuReqValidationError{
			field:  "RoleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetMenuIds()) < 1 {
		err := SaveRoleMenuReqValidationError{
			field:  "MenuIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SaveRoleMenuReqMultiError(errors)
	}

	return nil
}

// SaveRoleMenuReqMultiError is an error wrapping multiple validation errors
// returned by SaveRoleMenuReq.ValidateAll() if the designated constraints
// aren't met.
type SaveRoleMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveRoleMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveRoleMenuReqMultiError) AllErrors() []error { return m }

// SaveRoleMenuReqValidationError is the validation error returned by
// SaveRoleMenuReq.Validate if the designated constraints aren't met.
type SaveRoleMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveRoleMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveRoleMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveRoleMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveRoleMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveRoleMenuReqValidationError) ErrorName() string { return "SaveRoleMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e SaveRoleMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveRoleMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveRoleMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveRoleMenuReqValidationError{}

// Validate checks the field values on GetRoleMenuBtnReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRoleMenuBtnReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleMenuBtnReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoleMenuBtnReqMultiError, or nil if none found.
func (m *GetRoleMenuBtnReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleMenuBtnReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for RoleName

	// no validation rules for MenuId

	if len(errors) > 0 {
		return GetRoleMenuBtnReqMultiError(errors)
	}

	return nil
}

// GetRoleMenuBtnReqMultiError is an error wrapping multiple validation errors
// returned by GetRoleMenuBtnReq.ValidateAll() if the designated constraints
// aren't met.
type GetRoleMenuBtnReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleMenuBtnReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleMenuBtnReqMultiError) AllErrors() []error { return m }

// GetRoleMenuBtnReqValidationError is the validation error returned by
// GetRoleMenuBtnReq.Validate if the designated constraints aren't met.
type GetRoleMenuBtnReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleMenuBtnReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleMenuBtnReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleMenuBtnReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleMenuBtnReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleMenuBtnReqValidationError) ErrorName() string {
	return "GetRoleMenuBtnReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoleMenuBtnReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleMenuBtnReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleMenuBtnReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleMenuBtnReqValidationError{}

// Validate checks the field values on GetRoleMenuBtnRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRoleMenuBtnRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleMenuBtnRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoleMenuBtnResMultiError, or nil if none found.
func (m *GetRoleMenuBtnRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleMenuBtnRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRoleMenuBtnResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRoleMenuBtnResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRoleMenuBtnResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetRoleMenuBtnResMultiError(errors)
	}

	return nil
}

// GetRoleMenuBtnResMultiError is an error wrapping multiple validation errors
// returned by GetRoleMenuBtnRes.ValidateAll() if the designated constraints
// aren't met.
type GetRoleMenuBtnResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleMenuBtnResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleMenuBtnResMultiError) AllErrors() []error { return m }

// GetRoleMenuBtnResValidationError is the validation error returned by
// GetRoleMenuBtnRes.Validate if the designated constraints aren't met.
type GetRoleMenuBtnResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleMenuBtnResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleMenuBtnResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleMenuBtnResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleMenuBtnResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleMenuBtnResValidationError) ErrorName() string {
	return "GetRoleMenuBtnResValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoleMenuBtnResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleMenuBtnRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleMenuBtnResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleMenuBtnResValidationError{}

// Validate checks the field values on SaveRoleMenuBtnReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveRoleMenuBtnReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveRoleMenuBtnReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveRoleMenuBtnReqMultiError, or nil if none found.
func (m *SaveRoleMenuBtnReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveRoleMenuBtnReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRoleId() <= 0 {
		err := SaveRoleMenuBtnReqValidationError{
			field:  "RoleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMenuId() <= 0 {
		err := SaveRoleMenuBtnReqValidationError{
			field:  "MenuId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetMenuBtnIds()) < 1 {
		err := SaveRoleMenuBtnReqValidationError{
			field:  "MenuBtnIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SaveRoleMenuBtnReqMultiError(errors)
	}

	return nil
}

// SaveRoleMenuBtnReqMultiError is an error wrapping multiple validation errors
// returned by SaveRoleMenuBtnReq.ValidateAll() if the designated constraints
// aren't met.
type SaveRoleMenuBtnReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveRoleMenuBtnReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveRoleMenuBtnReqMultiError) AllErrors() []error { return m }

// SaveRoleMenuBtnReqValidationError is the validation error returned by
// SaveRoleMenuBtnReq.Validate if the designated constraints aren't met.
type SaveRoleMenuBtnReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveRoleMenuBtnReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveRoleMenuBtnReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveRoleMenuBtnReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveRoleMenuBtnReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveRoleMenuBtnReqValidationError) ErrorName() string {
	return "SaveRoleMenuBtnReqValidationError"
}

// Error satisfies the builtin error interface
func (e SaveRoleMenuBtnReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveRoleMenuBtnReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveRoleMenuBtnReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveRoleMenuBtnReqValidationError{}

// Validate checks the field values on RoleNameReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleNameReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleNameReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleNameReqMultiError, or
// nil if none found.
func (m *RoleNameReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleNameReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetRole()); l < 1 || l > 255 {
		err := RoleNameReqValidationError{
			field:  "Role",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RoleNameReqMultiError(errors)
	}

	return nil
}

// RoleNameReqMultiError is an error wrapping multiple validation errors
// returned by RoleNameReq.ValidateAll() if the designated constraints aren't met.
type RoleNameReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleNameReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleNameReqMultiError) AllErrors() []error { return m }

// RoleNameReqValidationError is the validation error returned by
// RoleNameReq.Validate if the designated constraints aren't met.
type RoleNameReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleNameReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleNameReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleNameReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleNameReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleNameReqValidationError) ErrorName() string { return "RoleNameReqValidationError" }

// Error satisfies the builtin error interface
func (e RoleNameReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleNameReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleNameReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleNameReqValidationError{}
