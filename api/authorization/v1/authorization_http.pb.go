// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.2
// - protoc             v4.23.0--rc1
// source: authorization/v1/authorization.proto

package authorization

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAuthorizationServiceCheckAuthorization = "/authorization.v1.AuthorizationService/CheckAuthorization"
const OperationAuthorizationServiceCreateApi = "/authorization.v1.AuthorizationService/CreateApi"
const OperationAuthorizationServiceCreateMenu = "/authorization.v1.AuthorizationService/CreateMenu"
const OperationAuthorizationServiceCreateRole = "/authorization.v1.AuthorizationService/CreateRole"
const OperationAuthorizationServiceDeleteApi = "/authorization.v1.AuthorizationService/DeleteApi"
const OperationAuthorizationServiceDeleteMenu = "/authorization.v1.AuthorizationService/DeleteMenu"
const OperationAuthorizationServiceDeleteRole = "/authorization.v1.AuthorizationService/DeleteRole"
const OperationAuthorizationServiceDeleteRoleForUser = "/authorization.v1.AuthorizationService/DeleteRoleForUser"
const OperationAuthorizationServiceDeleteRolesForUser = "/authorization.v1.AuthorizationService/DeleteRolesForUser"
const OperationAuthorizationServiceGetApiList = "/authorization.v1.AuthorizationService/GetApiList"
const OperationAuthorizationServiceGetApiListAll = "/authorization.v1.AuthorizationService/GetApiListAll"
const OperationAuthorizationServiceGetMenuAll = "/authorization.v1.AuthorizationService/GetMenuAll"
const OperationAuthorizationServiceGetMenuTree = "/authorization.v1.AuthorizationService/GetMenuTree"
const OperationAuthorizationServiceGetPolicies = "/authorization.v1.AuthorizationService/GetPolicies"
const OperationAuthorizationServiceGetRoleAll = "/authorization.v1.AuthorizationService/GetRoleAll"
const OperationAuthorizationServiceGetRoleMenu = "/authorization.v1.AuthorizationService/GetRoleMenu"
const OperationAuthorizationServiceGetRoleMenuBtn = "/authorization.v1.AuthorizationService/GetRoleMenuBtn"
const OperationAuthorizationServiceGetRoleMenuTree = "/authorization.v1.AuthorizationService/GetRoleMenuTree"
const OperationAuthorizationServiceGetRolesForUser = "/authorization.v1.AuthorizationService/GetRolesForUser"
const OperationAuthorizationServiceGetUsersForRole = "/authorization.v1.AuthorizationService/GetUsersForRole"
const OperationAuthorizationServiceSaveRoleMenu = "/authorization.v1.AuthorizationService/SaveRoleMenu"
const OperationAuthorizationServiceSaveRoleMenuBtn = "/authorization.v1.AuthorizationService/SaveRoleMenuBtn"
const OperationAuthorizationServiceSetRolesForUser = "/authorization.v1.AuthorizationService/SetRolesForUser"
const OperationAuthorizationServiceUpdateApi = "/authorization.v1.AuthorizationService/UpdateApi"
const OperationAuthorizationServiceUpdateMenu = "/authorization.v1.AuthorizationService/UpdateMenu"
const OperationAuthorizationServiceUpdatePolicies = "/authorization.v1.AuthorizationService/UpdatePolicies"
const OperationAuthorizationServiceUpdateRole = "/authorization.v1.AuthorizationService/UpdateRole"

type AuthorizationServiceHTTPServer interface {
	CheckAuthorization(context.Context, *CheckAuthorizationReq) (*CheckResponse, error)
	CreateApi(context.Context, *CreateApiReq) (*Api, error)
	CreateMenu(context.Context, *CreateMenuReq) (*Menu, error)
	CreateRole(context.Context, *CreateRoleReq) (*Role, error)
	DeleteApi(context.Context, *DeleteApiReq) (*CheckResponse, error)
	DeleteMenu(context.Context, *IdReq) (*CheckResponse, error)
	DeleteRole(context.Context, *DeleteRoleReq) (*CheckResponse, error)
	DeleteRoleForUser(context.Context, *DeleteRoleForUserReq) (*CheckResponse, error)
	DeleteRolesForUser(context.Context, *DeleteRolesForUserReq) (*CheckResponse, error)
	GetApiList(context.Context, *GetApiListReq) (*GetApiListPageRes, error)
	GetApiListAll(context.Context, *emptypb.Empty) (*GetApiListAllRes, error)
	GetMenuAll(context.Context, *emptypb.Empty) (*GetMenuTreeRes, error)
	GetMenuTree(context.Context, *emptypb.Empty) (*GetMenuTreeRes, error)
	GetPolicies(context.Context, *RoleNameReq) (*GetPoliciesRes, error)
	GetRoleAll(context.Context, *emptypb.Empty) (*GetRoleAllRes, error)
	GetRoleMenu(context.Context, *RoleNameReq) (*GetMenuTreeRes, error)
	GetRoleMenuBtn(context.Context, *GetRoleMenuBtnReq) (*GetRoleMenuBtnRes, error)
	GetRoleMenuTree(context.Context, *RoleNameReq) (*GetMenuTreeRes, error)
	GetRolesForUser(context.Context, *GetRolesForUserReq) (*GetRolesForUserRes, error)
	GetUsersForRole(context.Context, *RoleNameReq) (*GetUsersForRoleRes, error)
	SaveRoleMenu(context.Context, *SaveRoleMenuReq) (*CheckResponse, error)
	SaveRoleMenuBtn(context.Context, *SaveRoleMenuBtnReq) (*CheckResponse, error)
	SetRolesForUser(context.Context, *SetRolesForUserReq) (*CheckResponse, error)
	UpdateApi(context.Context, *UpdateApiReq) (*CheckResponse, error)
	UpdateMenu(context.Context, *UpdateMenuReq) (*CheckResponse, error)
	UpdatePolicies(context.Context, *UpdatePoliciesReq) (*CheckResponse, error)
	UpdateRole(context.Context, *UpdateRoleReq) (*CheckResponse, error)
}

func RegisterAuthorizationServiceHTTPServer(s *http.Server, srv AuthorizationServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/auth", _AuthorizationService_CheckAuthorization0_HTTP_Handler(srv))
	r.GET("/roleAll", _AuthorizationService_GetRoleAll0_HTTP_Handler(srv))
	r.POST("/role", _AuthorizationService_CreateRole0_HTTP_Handler(srv))
	r.PUT("/role", _AuthorizationService_UpdateRole0_HTTP_Handler(srv))
	r.DELETE("/role", _AuthorizationService_DeleteRole0_HTTP_Handler(srv))
	r.GET("/getRolesForUser", _AuthorizationService_GetRolesForUser0_HTTP_Handler(srv))
	r.GET("/getUsersForRole", _AuthorizationService_GetUsersForRole0_HTTP_Handler(srv))
	r.POST("/setRolesForUser", _AuthorizationService_SetRolesForUser0_HTTP_Handler(srv))
	r.DELETE("/deleteRoleForUser", _AuthorizationService_DeleteRoleForUser0_HTTP_Handler(srv))
	r.DELETE("/deleteRolesForUser", _AuthorizationService_DeleteRolesForUser0_HTTP_Handler(srv))
	r.GET("/getPolicies", _AuthorizationService_GetPolicies0_HTTP_Handler(srv))
	r.POST("/updatePolicies", _AuthorizationService_UpdatePolicies0_HTTP_Handler(srv))
	r.GET("/apiAll", _AuthorizationService_GetApiListAll0_HTTP_Handler(srv))
	r.GET("/apis", _AuthorizationService_GetApiList0_HTTP_Handler(srv))
	r.POST("/api", _AuthorizationService_CreateApi0_HTTP_Handler(srv))
	r.PUT("/api", _AuthorizationService_UpdateApi0_HTTP_Handler(srv))
	r.DELETE("/api", _AuthorizationService_DeleteApi0_HTTP_Handler(srv))
	r.GET("/menuAll", _AuthorizationService_GetMenuAll0_HTTP_Handler(srv))
	r.GET("/menuTree", _AuthorizationService_GetMenuTree0_HTTP_Handler(srv))
	r.POST("/menu", _AuthorizationService_CreateMenu0_HTTP_Handler(srv))
	r.PUT("/menu", _AuthorizationService_UpdateMenu0_HTTP_Handler(srv))
	r.DELETE("/menu", _AuthorizationService_DeleteMenu0_HTTP_Handler(srv))
	r.GET("/roleMenuTree", _AuthorizationService_GetRoleMenuTree0_HTTP_Handler(srv))
	r.GET("/roleMenu", _AuthorizationService_GetRoleMenu0_HTTP_Handler(srv))
	r.POST("/roleMenu", _AuthorizationService_SaveRoleMenu0_HTTP_Handler(srv))
	r.GET("/roleMenuBtn", _AuthorizationService_GetRoleMenuBtn0_HTTP_Handler(srv))
	r.POST("/roleMenuBtn", _AuthorizationService_SaveRoleMenuBtn0_HTTP_Handler(srv))
}

func _AuthorizationService_CheckAuthorization0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckAuthorizationReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceCheckAuthorization)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckAuthorization(ctx, req.(*CheckAuthorizationReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_GetRoleAll0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceGetRoleAll)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRoleAll(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRoleAllRes)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_CreateRole0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRoleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceCreateRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRole(ctx, req.(*CreateRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Role)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_UpdateRole0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRoleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceUpdateRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRole(ctx, req.(*UpdateRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_DeleteRole0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRoleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceDeleteRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRole(ctx, req.(*DeleteRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_GetRolesForUser0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRolesForUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceGetRolesForUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRolesForUser(ctx, req.(*GetRolesForUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRolesForUserRes)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_GetUsersForRole0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RoleNameReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceGetUsersForRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUsersForRole(ctx, req.(*RoleNameReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUsersForRoleRes)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_SetRolesForUser0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetRolesForUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceSetRolesForUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetRolesForUser(ctx, req.(*SetRolesForUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_DeleteRoleForUser0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRoleForUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceDeleteRoleForUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRoleForUser(ctx, req.(*DeleteRoleForUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_DeleteRolesForUser0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRolesForUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceDeleteRolesForUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRolesForUser(ctx, req.(*DeleteRolesForUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_GetPolicies0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RoleNameReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceGetPolicies)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPolicies(ctx, req.(*RoleNameReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPoliciesRes)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_UpdatePolicies0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePoliciesReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceUpdatePolicies)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePolicies(ctx, req.(*UpdatePoliciesReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_GetApiListAll0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceGetApiListAll)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetApiListAll(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetApiListAllRes)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_GetApiList0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetApiListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceGetApiList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetApiList(ctx, req.(*GetApiListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetApiListPageRes)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_CreateApi0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateApiReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceCreateApi)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateApi(ctx, req.(*CreateApiReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Api)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_UpdateApi0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateApiReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceUpdateApi)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateApi(ctx, req.(*UpdateApiReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_DeleteApi0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteApiReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceDeleteApi)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteApi(ctx, req.(*DeleteApiReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_GetMenuAll0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceGetMenuAll)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMenuAll(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMenuTreeRes)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_GetMenuTree0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceGetMenuTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMenuTree(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMenuTreeRes)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_CreateMenu0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateMenuReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceCreateMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateMenu(ctx, req.(*CreateMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Menu)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_UpdateMenu0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateMenuReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceUpdateMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMenu(ctx, req.(*UpdateMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_DeleteMenu0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceDeleteMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteMenu(ctx, req.(*IdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_GetRoleMenuTree0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RoleNameReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceGetRoleMenuTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRoleMenuTree(ctx, req.(*RoleNameReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMenuTreeRes)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_GetRoleMenu0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RoleNameReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceGetRoleMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRoleMenu(ctx, req.(*RoleNameReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMenuTreeRes)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_SaveRoleMenu0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveRoleMenuReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceSaveRoleMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveRoleMenu(ctx, req.(*SaveRoleMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckResponse)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_GetRoleMenuBtn0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRoleMenuBtnReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceGetRoleMenuBtn)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRoleMenuBtn(ctx, req.(*GetRoleMenuBtnReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRoleMenuBtnRes)
		return ctx.Result(200, reply)
	}
}

func _AuthorizationService_SaveRoleMenuBtn0_HTTP_Handler(srv AuthorizationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveRoleMenuBtnReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthorizationServiceSaveRoleMenuBtn)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveRoleMenuBtn(ctx, req.(*SaveRoleMenuBtnReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckResponse)
		return ctx.Result(200, reply)
	}
}

type AuthorizationServiceHTTPClient interface {
	CheckAuthorization(ctx context.Context, req *CheckAuthorizationReq, opts ...http.CallOption) (rsp *CheckResponse, err error)
	CreateApi(ctx context.Context, req *CreateApiReq, opts ...http.CallOption) (rsp *Api, err error)
	CreateMenu(ctx context.Context, req *CreateMenuReq, opts ...http.CallOption) (rsp *Menu, err error)
	CreateRole(ctx context.Context, req *CreateRoleReq, opts ...http.CallOption) (rsp *Role, err error)
	DeleteApi(ctx context.Context, req *DeleteApiReq, opts ...http.CallOption) (rsp *CheckResponse, err error)
	DeleteMenu(ctx context.Context, req *IdReq, opts ...http.CallOption) (rsp *CheckResponse, err error)
	DeleteRole(ctx context.Context, req *DeleteRoleReq, opts ...http.CallOption) (rsp *CheckResponse, err error)
	DeleteRoleForUser(ctx context.Context, req *DeleteRoleForUserReq, opts ...http.CallOption) (rsp *CheckResponse, err error)
	DeleteRolesForUser(ctx context.Context, req *DeleteRolesForUserReq, opts ...http.CallOption) (rsp *CheckResponse, err error)
	GetApiList(ctx context.Context, req *GetApiListReq, opts ...http.CallOption) (rsp *GetApiListPageRes, err error)
	GetApiListAll(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetApiListAllRes, err error)
	GetMenuAll(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetMenuTreeRes, err error)
	GetMenuTree(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetMenuTreeRes, err error)
	GetPolicies(ctx context.Context, req *RoleNameReq, opts ...http.CallOption) (rsp *GetPoliciesRes, err error)
	GetRoleAll(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetRoleAllRes, err error)
	GetRoleMenu(ctx context.Context, req *RoleNameReq, opts ...http.CallOption) (rsp *GetMenuTreeRes, err error)
	GetRoleMenuBtn(ctx context.Context, req *GetRoleMenuBtnReq, opts ...http.CallOption) (rsp *GetRoleMenuBtnRes, err error)
	GetRoleMenuTree(ctx context.Context, req *RoleNameReq, opts ...http.CallOption) (rsp *GetMenuTreeRes, err error)
	GetRolesForUser(ctx context.Context, req *GetRolesForUserReq, opts ...http.CallOption) (rsp *GetRolesForUserRes, err error)
	GetUsersForRole(ctx context.Context, req *RoleNameReq, opts ...http.CallOption) (rsp *GetUsersForRoleRes, err error)
	SaveRoleMenu(ctx context.Context, req *SaveRoleMenuReq, opts ...http.CallOption) (rsp *CheckResponse, err error)
	SaveRoleMenuBtn(ctx context.Context, req *SaveRoleMenuBtnReq, opts ...http.CallOption) (rsp *CheckResponse, err error)
	SetRolesForUser(ctx context.Context, req *SetRolesForUserReq, opts ...http.CallOption) (rsp *CheckResponse, err error)
	UpdateApi(ctx context.Context, req *UpdateApiReq, opts ...http.CallOption) (rsp *CheckResponse, err error)
	UpdateMenu(ctx context.Context, req *UpdateMenuReq, opts ...http.CallOption) (rsp *CheckResponse, err error)
	UpdatePolicies(ctx context.Context, req *UpdatePoliciesReq, opts ...http.CallOption) (rsp *CheckResponse, err error)
	UpdateRole(ctx context.Context, req *UpdateRoleReq, opts ...http.CallOption) (rsp *CheckResponse, err error)
}

type AuthorizationServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthorizationServiceHTTPClient(client *http.Client) AuthorizationServiceHTTPClient {
	return &AuthorizationServiceHTTPClientImpl{client}
}

func (c *AuthorizationServiceHTTPClientImpl) CheckAuthorization(ctx context.Context, in *CheckAuthorizationReq, opts ...http.CallOption) (*CheckResponse, error) {
	var out CheckResponse
	pattern := "/auth"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorizationServiceCheckAuthorization))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) CreateApi(ctx context.Context, in *CreateApiReq, opts ...http.CallOption) (*Api, error) {
	var out Api
	pattern := "/api"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthorizationServiceCreateApi))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) CreateMenu(ctx context.Context, in *CreateMenuReq, opts ...http.CallOption) (*Menu, error) {
	var out Menu
	pattern := "/menu"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthorizationServiceCreateMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) CreateRole(ctx context.Context, in *CreateRoleReq, opts ...http.CallOption) (*Role, error) {
	var out Role
	pattern := "/role"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthorizationServiceCreateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) DeleteApi(ctx context.Context, in *DeleteApiReq, opts ...http.CallOption) (*CheckResponse, error) {
	var out CheckResponse
	pattern := "/api"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorizationServiceDeleteApi))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) DeleteMenu(ctx context.Context, in *IdReq, opts ...http.CallOption) (*CheckResponse, error) {
	var out CheckResponse
	pattern := "/menu"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorizationServiceDeleteMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...http.CallOption) (*CheckResponse, error) {
	var out CheckResponse
	pattern := "/role"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorizationServiceDeleteRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) DeleteRoleForUser(ctx context.Context, in *DeleteRoleForUserReq, opts ...http.CallOption) (*CheckResponse, error) {
	var out CheckResponse
	pattern := "/deleteRoleForUser"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorizationServiceDeleteRoleForUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) DeleteRolesForUser(ctx context.Context, in *DeleteRolesForUserReq, opts ...http.CallOption) (*CheckResponse, error) {
	var out CheckResponse
	pattern := "/deleteRolesForUser"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorizationServiceDeleteRolesForUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) GetApiList(ctx context.Context, in *GetApiListReq, opts ...http.CallOption) (*GetApiListPageRes, error) {
	var out GetApiListPageRes
	pattern := "/apis"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorizationServiceGetApiList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) GetApiListAll(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetApiListAllRes, error) {
	var out GetApiListAllRes
	pattern := "/apiAll"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorizationServiceGetApiListAll))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) GetMenuAll(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetMenuTreeRes, error) {
	var out GetMenuTreeRes
	pattern := "/menuAll"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorizationServiceGetMenuAll))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) GetMenuTree(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetMenuTreeRes, error) {
	var out GetMenuTreeRes
	pattern := "/menuTree"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorizationServiceGetMenuTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) GetPolicies(ctx context.Context, in *RoleNameReq, opts ...http.CallOption) (*GetPoliciesRes, error) {
	var out GetPoliciesRes
	pattern := "/getPolicies"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorizationServiceGetPolicies))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) GetRoleAll(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetRoleAllRes, error) {
	var out GetRoleAllRes
	pattern := "/roleAll"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorizationServiceGetRoleAll))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) GetRoleMenu(ctx context.Context, in *RoleNameReq, opts ...http.CallOption) (*GetMenuTreeRes, error) {
	var out GetMenuTreeRes
	pattern := "/roleMenu"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorizationServiceGetRoleMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) GetRoleMenuBtn(ctx context.Context, in *GetRoleMenuBtnReq, opts ...http.CallOption) (*GetRoleMenuBtnRes, error) {
	var out GetRoleMenuBtnRes
	pattern := "/roleMenuBtn"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorizationServiceGetRoleMenuBtn))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) GetRoleMenuTree(ctx context.Context, in *RoleNameReq, opts ...http.CallOption) (*GetMenuTreeRes, error) {
	var out GetMenuTreeRes
	pattern := "/roleMenuTree"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorizationServiceGetRoleMenuTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) GetRolesForUser(ctx context.Context, in *GetRolesForUserReq, opts ...http.CallOption) (*GetRolesForUserRes, error) {
	var out GetRolesForUserRes
	pattern := "/getRolesForUser"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorizationServiceGetRolesForUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) GetUsersForRole(ctx context.Context, in *RoleNameReq, opts ...http.CallOption) (*GetUsersForRoleRes, error) {
	var out GetUsersForRoleRes
	pattern := "/getUsersForRole"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthorizationServiceGetUsersForRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) SaveRoleMenu(ctx context.Context, in *SaveRoleMenuReq, opts ...http.CallOption) (*CheckResponse, error) {
	var out CheckResponse
	pattern := "/roleMenu"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthorizationServiceSaveRoleMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) SaveRoleMenuBtn(ctx context.Context, in *SaveRoleMenuBtnReq, opts ...http.CallOption) (*CheckResponse, error) {
	var out CheckResponse
	pattern := "/roleMenuBtn"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthorizationServiceSaveRoleMenuBtn))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) SetRolesForUser(ctx context.Context, in *SetRolesForUserReq, opts ...http.CallOption) (*CheckResponse, error) {
	var out CheckResponse
	pattern := "/setRolesForUser"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthorizationServiceSetRolesForUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) UpdateApi(ctx context.Context, in *UpdateApiReq, opts ...http.CallOption) (*CheckResponse, error) {
	var out CheckResponse
	pattern := "/api"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthorizationServiceUpdateApi))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) UpdateMenu(ctx context.Context, in *UpdateMenuReq, opts ...http.CallOption) (*CheckResponse, error) {
	var out CheckResponse
	pattern := "/menu"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthorizationServiceUpdateMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) UpdatePolicies(ctx context.Context, in *UpdatePoliciesReq, opts ...http.CallOption) (*CheckResponse, error) {
	var out CheckResponse
	pattern := "/updatePolicies"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthorizationServiceUpdatePolicies))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationServiceHTTPClientImpl) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...http.CallOption) (*CheckResponse, error) {
	var out CheckResponse
	pattern := "/role"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthorizationServiceUpdateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
