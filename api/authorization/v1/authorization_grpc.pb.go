// Code generated by entproto. DO NOT EDIT.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.0--rc1
// source: authorization/v1/authorization.proto

package authorization

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthorizationService_CheckAuthorization_FullMethodName = "/authorization.v1.AuthorizationService/CheckAuthorization"
	AuthorizationService_GetRoleAll_FullMethodName         = "/authorization.v1.AuthorizationService/GetRoleAll"
	AuthorizationService_CreateRole_FullMethodName         = "/authorization.v1.AuthorizationService/CreateRole"
	AuthorizationService_UpdateRole_FullMethodName         = "/authorization.v1.AuthorizationService/UpdateRole"
	AuthorizationService_DeleteRole_FullMethodName         = "/authorization.v1.AuthorizationService/DeleteRole"
	AuthorizationService_GetRolesForUser_FullMethodName    = "/authorization.v1.AuthorizationService/GetRolesForUser"
	AuthorizationService_GetUsersForRole_FullMethodName    = "/authorization.v1.AuthorizationService/GetUsersForRole"
	AuthorizationService_SetRolesForUser_FullMethodName    = "/authorization.v1.AuthorizationService/SetRolesForUser"
	AuthorizationService_DeleteRoleForUser_FullMethodName  = "/authorization.v1.AuthorizationService/DeleteRoleForUser"
	AuthorizationService_DeleteRolesForUser_FullMethodName = "/authorization.v1.AuthorizationService/DeleteRolesForUser"
	AuthorizationService_GetPolicies_FullMethodName        = "/authorization.v1.AuthorizationService/GetPolicies"
	AuthorizationService_UpdatePolicies_FullMethodName     = "/authorization.v1.AuthorizationService/UpdatePolicies"
	AuthorizationService_GetApiListAll_FullMethodName      = "/authorization.v1.AuthorizationService/GetApiListAll"
	AuthorizationService_GetApiList_FullMethodName         = "/authorization.v1.AuthorizationService/GetApiList"
	AuthorizationService_CreateApi_FullMethodName          = "/authorization.v1.AuthorizationService/CreateApi"
	AuthorizationService_UpdateApi_FullMethodName          = "/authorization.v1.AuthorizationService/UpdateApi"
	AuthorizationService_DeleteApi_FullMethodName          = "/authorization.v1.AuthorizationService/DeleteApi"
	AuthorizationService_GetMenuAll_FullMethodName         = "/authorization.v1.AuthorizationService/GetMenuAll"
	AuthorizationService_GetMenuTree_FullMethodName        = "/authorization.v1.AuthorizationService/GetMenuTree"
	AuthorizationService_CreateMenu_FullMethodName         = "/authorization.v1.AuthorizationService/CreateMenu"
	AuthorizationService_UpdateMenu_FullMethodName         = "/authorization.v1.AuthorizationService/UpdateMenu"
	AuthorizationService_DeleteMenu_FullMethodName         = "/authorization.v1.AuthorizationService/DeleteMenu"
	AuthorizationService_GetRoleMenuTree_FullMethodName    = "/authorization.v1.AuthorizationService/GetRoleMenuTree"
	AuthorizationService_GetRoleMenu_FullMethodName        = "/authorization.v1.AuthorizationService/GetRoleMenu"
	AuthorizationService_SaveRoleMenu_FullMethodName       = "/authorization.v1.AuthorizationService/SaveRoleMenu"
	AuthorizationService_GetRoleMenuBtn_FullMethodName     = "/authorization.v1.AuthorizationService/GetRoleMenuBtn"
	AuthorizationService_SaveRoleMenuBtn_FullMethodName    = "/authorization.v1.AuthorizationService/SaveRoleMenuBtn"
)

// AuthorizationServiceClient is the client API for AuthorizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorizationServiceClient interface {
	// 检查权限
	CheckAuthorization(ctx context.Context, in *CheckAuthorizationReq, opts ...grpc.CallOption) (*CheckResponse, error)
	// 全部角色
	GetRoleAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRoleAllRes, error)
	// 角色创建
	CreateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*Role, error)
	// 角色更新
	UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*CheckResponse, error)
	// 角色删除
	DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...grpc.CallOption) (*CheckResponse, error)
	// 用户角色 - 列表
	GetRolesForUser(ctx context.Context, in *GetRolesForUserReq, opts ...grpc.CallOption) (*GetRolesForUserRes, error)
	// 角色用户 - 列表
	GetUsersForRole(ctx context.Context, in *RoleNameReq, opts ...grpc.CallOption) (*GetUsersForRoleRes, error)
	// 用户角色 - 设置
	SetRolesForUser(ctx context.Context, in *SetRolesForUserReq, opts ...grpc.CallOption) (*CheckResponse, error)
	// 用户角色 - 删除(单个)
	DeleteRoleForUser(ctx context.Context, in *DeleteRoleForUserReq, opts ...grpc.CallOption) (*CheckResponse, error)
	// 用户角色 - 删除(全部)
	DeleteRolesForUser(ctx context.Context, in *DeleteRolesForUserReq, opts ...grpc.CallOption) (*CheckResponse, error)
	// 角色权限策略 - 列表
	GetPolicies(ctx context.Context, in *RoleNameReq, opts ...grpc.CallOption) (*GetPoliciesRes, error)
	// 角色权限策略 - 设置
	UpdatePolicies(ctx context.Context, in *UpdatePoliciesReq, opts ...grpc.CallOption) (*CheckResponse, error)
	// Api列表
	GetApiListAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetApiListAllRes, error)
	// Api列表
	GetApiList(ctx context.Context, in *GetApiListReq, opts ...grpc.CallOption) (*GetApiListPageRes, error)
	// Api创建
	CreateApi(ctx context.Context, in *CreateApiReq, opts ...grpc.CallOption) (*Api, error)
	// Api更新
	UpdateApi(ctx context.Context, in *UpdateApiReq, opts ...grpc.CallOption) (*CheckResponse, error)
	// Api删除
	DeleteApi(ctx context.Context, in *DeleteApiReq, opts ...grpc.CallOption) (*CheckResponse, error)
	// 菜单列表 - 全部
	GetMenuAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMenuTreeRes, error)
	// 菜单列表 - 树状结构
	GetMenuTree(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMenuTreeRes, error)
	// 菜单 - 创建
	CreateMenu(ctx context.Context, in *CreateMenuReq, opts ...grpc.CallOption) (*Menu, error)
	// 菜单 - 更新
	UpdateMenu(ctx context.Context, in *UpdateMenuReq, opts ...grpc.CallOption) (*CheckResponse, error)
	// 菜单 - 删除
	DeleteMenu(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*CheckResponse, error)
	// 角色菜单 - 树状结构
	GetRoleMenuTree(ctx context.Context, in *RoleNameReq, opts ...grpc.CallOption) (*GetMenuTreeRes, error)
	// 角色菜单 - 列表
	GetRoleMenu(ctx context.Context, in *RoleNameReq, opts ...grpc.CallOption) (*GetMenuTreeRes, error)
	// 角色菜单 - 更新
	SaveRoleMenu(ctx context.Context, in *SaveRoleMenuReq, opts ...grpc.CallOption) (*CheckResponse, error)
	// 角色菜单按钮 - 列表
	GetRoleMenuBtn(ctx context.Context, in *GetRoleMenuBtnReq, opts ...grpc.CallOption) (*GetRoleMenuBtnRes, error)
	// 角色菜单按钮 - 保存
	SaveRoleMenuBtn(ctx context.Context, in *SaveRoleMenuBtnReq, opts ...grpc.CallOption) (*CheckResponse, error)
}

type authorizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizationServiceClient(cc grpc.ClientConnInterface) AuthorizationServiceClient {
	return &authorizationServiceClient{cc}
}

func (c *authorizationServiceClient) CheckAuthorization(ctx context.Context, in *CheckAuthorizationReq, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_CheckAuthorization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) GetRoleAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRoleAllRes, error) {
	out := new(GetRoleAllRes)
	err := c.cc.Invoke(ctx, AuthorizationService_GetRoleAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) CreateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, AuthorizationService_CreateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_UpdateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_DeleteRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) GetRolesForUser(ctx context.Context, in *GetRolesForUserReq, opts ...grpc.CallOption) (*GetRolesForUserRes, error) {
	out := new(GetRolesForUserRes)
	err := c.cc.Invoke(ctx, AuthorizationService_GetRolesForUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) GetUsersForRole(ctx context.Context, in *RoleNameReq, opts ...grpc.CallOption) (*GetUsersForRoleRes, error) {
	out := new(GetUsersForRoleRes)
	err := c.cc.Invoke(ctx, AuthorizationService_GetUsersForRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) SetRolesForUser(ctx context.Context, in *SetRolesForUserReq, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_SetRolesForUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) DeleteRoleForUser(ctx context.Context, in *DeleteRoleForUserReq, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_DeleteRoleForUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) DeleteRolesForUser(ctx context.Context, in *DeleteRolesForUserReq, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_DeleteRolesForUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) GetPolicies(ctx context.Context, in *RoleNameReq, opts ...grpc.CallOption) (*GetPoliciesRes, error) {
	out := new(GetPoliciesRes)
	err := c.cc.Invoke(ctx, AuthorizationService_GetPolicies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) UpdatePolicies(ctx context.Context, in *UpdatePoliciesReq, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_UpdatePolicies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) GetApiListAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetApiListAllRes, error) {
	out := new(GetApiListAllRes)
	err := c.cc.Invoke(ctx, AuthorizationService_GetApiListAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) GetApiList(ctx context.Context, in *GetApiListReq, opts ...grpc.CallOption) (*GetApiListPageRes, error) {
	out := new(GetApiListPageRes)
	err := c.cc.Invoke(ctx, AuthorizationService_GetApiList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) CreateApi(ctx context.Context, in *CreateApiReq, opts ...grpc.CallOption) (*Api, error) {
	out := new(Api)
	err := c.cc.Invoke(ctx, AuthorizationService_CreateApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) UpdateApi(ctx context.Context, in *UpdateApiReq, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_UpdateApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) DeleteApi(ctx context.Context, in *DeleteApiReq, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_DeleteApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) GetMenuAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMenuTreeRes, error) {
	out := new(GetMenuTreeRes)
	err := c.cc.Invoke(ctx, AuthorizationService_GetMenuAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) GetMenuTree(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMenuTreeRes, error) {
	out := new(GetMenuTreeRes)
	err := c.cc.Invoke(ctx, AuthorizationService_GetMenuTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) CreateMenu(ctx context.Context, in *CreateMenuReq, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, AuthorizationService_CreateMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) UpdateMenu(ctx context.Context, in *UpdateMenuReq, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_UpdateMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) DeleteMenu(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_DeleteMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) GetRoleMenuTree(ctx context.Context, in *RoleNameReq, opts ...grpc.CallOption) (*GetMenuTreeRes, error) {
	out := new(GetMenuTreeRes)
	err := c.cc.Invoke(ctx, AuthorizationService_GetRoleMenuTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) GetRoleMenu(ctx context.Context, in *RoleNameReq, opts ...grpc.CallOption) (*GetMenuTreeRes, error) {
	out := new(GetMenuTreeRes)
	err := c.cc.Invoke(ctx, AuthorizationService_GetRoleMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) SaveRoleMenu(ctx context.Context, in *SaveRoleMenuReq, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_SaveRoleMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) GetRoleMenuBtn(ctx context.Context, in *GetRoleMenuBtnReq, opts ...grpc.CallOption) (*GetRoleMenuBtnRes, error) {
	out := new(GetRoleMenuBtnRes)
	err := c.cc.Invoke(ctx, AuthorizationService_GetRoleMenuBtn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) SaveRoleMenuBtn(ctx context.Context, in *SaveRoleMenuBtnReq, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_SaveRoleMenuBtn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationServiceServer is the server API for AuthorizationService service.
// All implementations must embed UnimplementedAuthorizationServiceServer
// for forward compatibility
type AuthorizationServiceServer interface {
	// 检查权限
	CheckAuthorization(context.Context, *CheckAuthorizationReq) (*CheckResponse, error)
	// 全部角色
	GetRoleAll(context.Context, *emptypb.Empty) (*GetRoleAllRes, error)
	// 角色创建
	CreateRole(context.Context, *CreateRoleReq) (*Role, error)
	// 角色更新
	UpdateRole(context.Context, *UpdateRoleReq) (*CheckResponse, error)
	// 角色删除
	DeleteRole(context.Context, *DeleteRoleReq) (*CheckResponse, error)
	// 用户角色 - 列表
	GetRolesForUser(context.Context, *GetRolesForUserReq) (*GetRolesForUserRes, error)
	// 角色用户 - 列表
	GetUsersForRole(context.Context, *RoleNameReq) (*GetUsersForRoleRes, error)
	// 用户角色 - 设置
	SetRolesForUser(context.Context, *SetRolesForUserReq) (*CheckResponse, error)
	// 用户角色 - 删除(单个)
	DeleteRoleForUser(context.Context, *DeleteRoleForUserReq) (*CheckResponse, error)
	// 用户角色 - 删除(全部)
	DeleteRolesForUser(context.Context, *DeleteRolesForUserReq) (*CheckResponse, error)
	// 角色权限策略 - 列表
	GetPolicies(context.Context, *RoleNameReq) (*GetPoliciesRes, error)
	// 角色权限策略 - 设置
	UpdatePolicies(context.Context, *UpdatePoliciesReq) (*CheckResponse, error)
	// Api列表
	GetApiListAll(context.Context, *emptypb.Empty) (*GetApiListAllRes, error)
	// Api列表
	GetApiList(context.Context, *GetApiListReq) (*GetApiListPageRes, error)
	// Api创建
	CreateApi(context.Context, *CreateApiReq) (*Api, error)
	// Api更新
	UpdateApi(context.Context, *UpdateApiReq) (*CheckResponse, error)
	// Api删除
	DeleteApi(context.Context, *DeleteApiReq) (*CheckResponse, error)
	// 菜单列表 - 全部
	GetMenuAll(context.Context, *emptypb.Empty) (*GetMenuTreeRes, error)
	// 菜单列表 - 树状结构
	GetMenuTree(context.Context, *emptypb.Empty) (*GetMenuTreeRes, error)
	// 菜单 - 创建
	CreateMenu(context.Context, *CreateMenuReq) (*Menu, error)
	// 菜单 - 更新
	UpdateMenu(context.Context, *UpdateMenuReq) (*CheckResponse, error)
	// 菜单 - 删除
	DeleteMenu(context.Context, *IdReq) (*CheckResponse, error)
	// 角色菜单 - 树状结构
	GetRoleMenuTree(context.Context, *RoleNameReq) (*GetMenuTreeRes, error)
	// 角色菜单 - 列表
	GetRoleMenu(context.Context, *RoleNameReq) (*GetMenuTreeRes, error)
	// 角色菜单 - 更新
	SaveRoleMenu(context.Context, *SaveRoleMenuReq) (*CheckResponse, error)
	// 角色菜单按钮 - 列表
	GetRoleMenuBtn(context.Context, *GetRoleMenuBtnReq) (*GetRoleMenuBtnRes, error)
	// 角色菜单按钮 - 保存
	SaveRoleMenuBtn(context.Context, *SaveRoleMenuBtnReq) (*CheckResponse, error)
	mustEmbedUnimplementedAuthorizationServiceServer()
}

// UnimplementedAuthorizationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorizationServiceServer struct {
}

func (UnimplementedAuthorizationServiceServer) CheckAuthorization(context.Context, *CheckAuthorizationReq) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAuthorization not implemented")
}
func (UnimplementedAuthorizationServiceServer) GetRoleAll(context.Context, *emptypb.Empty) (*GetRoleAllRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleAll not implemented")
}
func (UnimplementedAuthorizationServiceServer) CreateRole(context.Context, *CreateRoleReq) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedAuthorizationServiceServer) UpdateRole(context.Context, *UpdateRoleReq) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedAuthorizationServiceServer) DeleteRole(context.Context, *DeleteRoleReq) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedAuthorizationServiceServer) GetRolesForUser(context.Context, *GetRolesForUserReq) (*GetRolesForUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolesForUser not implemented")
}
func (UnimplementedAuthorizationServiceServer) GetUsersForRole(context.Context, *RoleNameReq) (*GetUsersForRoleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersForRole not implemented")
}
func (UnimplementedAuthorizationServiceServer) SetRolesForUser(context.Context, *SetRolesForUserReq) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRolesForUser not implemented")
}
func (UnimplementedAuthorizationServiceServer) DeleteRoleForUser(context.Context, *DeleteRoleForUserReq) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleForUser not implemented")
}
func (UnimplementedAuthorizationServiceServer) DeleteRolesForUser(context.Context, *DeleteRolesForUserReq) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRolesForUser not implemented")
}
func (UnimplementedAuthorizationServiceServer) GetPolicies(context.Context, *RoleNameReq) (*GetPoliciesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicies not implemented")
}
func (UnimplementedAuthorizationServiceServer) UpdatePolicies(context.Context, *UpdatePoliciesReq) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicies not implemented")
}
func (UnimplementedAuthorizationServiceServer) GetApiListAll(context.Context, *emptypb.Empty) (*GetApiListAllRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiListAll not implemented")
}
func (UnimplementedAuthorizationServiceServer) GetApiList(context.Context, *GetApiListReq) (*GetApiListPageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiList not implemented")
}
func (UnimplementedAuthorizationServiceServer) CreateApi(context.Context, *CreateApiReq) (*Api, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApi not implemented")
}
func (UnimplementedAuthorizationServiceServer) UpdateApi(context.Context, *UpdateApiReq) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApi not implemented")
}
func (UnimplementedAuthorizationServiceServer) DeleteApi(context.Context, *DeleteApiReq) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApi not implemented")
}
func (UnimplementedAuthorizationServiceServer) GetMenuAll(context.Context, *emptypb.Empty) (*GetMenuTreeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuAll not implemented")
}
func (UnimplementedAuthorizationServiceServer) GetMenuTree(context.Context, *emptypb.Empty) (*GetMenuTreeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuTree not implemented")
}
func (UnimplementedAuthorizationServiceServer) CreateMenu(context.Context, *CreateMenuReq) (*Menu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenu not implemented")
}
func (UnimplementedAuthorizationServiceServer) UpdateMenu(context.Context, *UpdateMenuReq) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenu not implemented")
}
func (UnimplementedAuthorizationServiceServer) DeleteMenu(context.Context, *IdReq) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenu not implemented")
}
func (UnimplementedAuthorizationServiceServer) GetRoleMenuTree(context.Context, *RoleNameReq) (*GetMenuTreeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleMenuTree not implemented")
}
func (UnimplementedAuthorizationServiceServer) GetRoleMenu(context.Context, *RoleNameReq) (*GetMenuTreeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleMenu not implemented")
}
func (UnimplementedAuthorizationServiceServer) SaveRoleMenu(context.Context, *SaveRoleMenuReq) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveRoleMenu not implemented")
}
func (UnimplementedAuthorizationServiceServer) GetRoleMenuBtn(context.Context, *GetRoleMenuBtnReq) (*GetRoleMenuBtnRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleMenuBtn not implemented")
}
func (UnimplementedAuthorizationServiceServer) SaveRoleMenuBtn(context.Context, *SaveRoleMenuBtnReq) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveRoleMenuBtn not implemented")
}
func (UnimplementedAuthorizationServiceServer) mustEmbedUnimplementedAuthorizationServiceServer() {}

// UnsafeAuthorizationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizationServiceServer will
// result in compilation errors.
type UnsafeAuthorizationServiceServer interface {
	mustEmbedUnimplementedAuthorizationServiceServer()
}

func RegisterAuthorizationServiceServer(s grpc.ServiceRegistrar, srv AuthorizationServiceServer) {
	s.RegisterService(&AuthorizationService_ServiceDesc, srv)
}

func _AuthorizationService_CheckAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAuthorizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).CheckAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_CheckAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).CheckAuthorization(ctx, req.(*CheckAuthorizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_GetRoleAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).GetRoleAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_GetRoleAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).GetRoleAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).CreateRole(ctx, req.(*CreateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).UpdateRole(ctx, req.(*UpdateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).DeleteRole(ctx, req.(*DeleteRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_GetRolesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolesForUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).GetRolesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_GetRolesForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).GetRolesForUser(ctx, req.(*GetRolesForUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_GetUsersForRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).GetUsersForRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_GetUsersForRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).GetUsersForRole(ctx, req.(*RoleNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_SetRolesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRolesForUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).SetRolesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_SetRolesForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).SetRolesForUser(ctx, req.(*SetRolesForUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_DeleteRoleForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleForUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).DeleteRoleForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_DeleteRoleForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).DeleteRoleForUser(ctx, req.(*DeleteRoleForUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_DeleteRolesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRolesForUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).DeleteRolesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_DeleteRolesForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).DeleteRolesForUser(ctx, req.(*DeleteRolesForUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_GetPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).GetPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_GetPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).GetPolicies(ctx, req.(*RoleNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_UpdatePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePoliciesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).UpdatePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_UpdatePolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).UpdatePolicies(ctx, req.(*UpdatePoliciesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_GetApiListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).GetApiListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_GetApiListAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).GetApiListAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_GetApiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).GetApiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_GetApiList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).GetApiList(ctx, req.(*GetApiListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_CreateApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).CreateApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_CreateApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).CreateApi(ctx, req.(*CreateApiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_UpdateApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).UpdateApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_UpdateApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).UpdateApi(ctx, req.(*UpdateApiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_DeleteApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).DeleteApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_DeleteApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).DeleteApi(ctx, req.(*DeleteApiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_GetMenuAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).GetMenuAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_GetMenuAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).GetMenuAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_GetMenuTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).GetMenuTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_GetMenuTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).GetMenuTree(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_CreateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).CreateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_CreateMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).CreateMenu(ctx, req.(*CreateMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_UpdateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).UpdateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_UpdateMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).UpdateMenu(ctx, req.(*UpdateMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_DeleteMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).DeleteMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_DeleteMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).DeleteMenu(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_GetRoleMenuTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).GetRoleMenuTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_GetRoleMenuTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).GetRoleMenuTree(ctx, req.(*RoleNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_GetRoleMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).GetRoleMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_GetRoleMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).GetRoleMenu(ctx, req.(*RoleNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_SaveRoleMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRoleMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).SaveRoleMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_SaveRoleMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).SaveRoleMenu(ctx, req.(*SaveRoleMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_GetRoleMenuBtn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleMenuBtnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).GetRoleMenuBtn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_GetRoleMenuBtn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).GetRoleMenuBtn(ctx, req.(*GetRoleMenuBtnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_SaveRoleMenuBtn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRoleMenuBtnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).SaveRoleMenuBtn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_SaveRoleMenuBtn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).SaveRoleMenuBtn(ctx, req.(*SaveRoleMenuBtnReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorizationService_ServiceDesc is the grpc.ServiceDesc for AuthorizationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorizationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authorization.v1.AuthorizationService",
	HandlerType: (*AuthorizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAuthorization",
			Handler:    _AuthorizationService_CheckAuthorization_Handler,
		},
		{
			MethodName: "GetRoleAll",
			Handler:    _AuthorizationService_GetRoleAll_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _AuthorizationService_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _AuthorizationService_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _AuthorizationService_DeleteRole_Handler,
		},
		{
			MethodName: "GetRolesForUser",
			Handler:    _AuthorizationService_GetRolesForUser_Handler,
		},
		{
			MethodName: "GetUsersForRole",
			Handler:    _AuthorizationService_GetUsersForRole_Handler,
		},
		{
			MethodName: "SetRolesForUser",
			Handler:    _AuthorizationService_SetRolesForUser_Handler,
		},
		{
			MethodName: "DeleteRoleForUser",
			Handler:    _AuthorizationService_DeleteRoleForUser_Handler,
		},
		{
			MethodName: "DeleteRolesForUser",
			Handler:    _AuthorizationService_DeleteRolesForUser_Handler,
		},
		{
			MethodName: "GetPolicies",
			Handler:    _AuthorizationService_GetPolicies_Handler,
		},
		{
			MethodName: "UpdatePolicies",
			Handler:    _AuthorizationService_UpdatePolicies_Handler,
		},
		{
			MethodName: "GetApiListAll",
			Handler:    _AuthorizationService_GetApiListAll_Handler,
		},
		{
			MethodName: "GetApiList",
			Handler:    _AuthorizationService_GetApiList_Handler,
		},
		{
			MethodName: "CreateApi",
			Handler:    _AuthorizationService_CreateApi_Handler,
		},
		{
			MethodName: "UpdateApi",
			Handler:    _AuthorizationService_UpdateApi_Handler,
		},
		{
			MethodName: "DeleteApi",
			Handler:    _AuthorizationService_DeleteApi_Handler,
		},
		{
			MethodName: "GetMenuAll",
			Handler:    _AuthorizationService_GetMenuAll_Handler,
		},
		{
			MethodName: "GetMenuTree",
			Handler:    _AuthorizationService_GetMenuTree_Handler,
		},
		{
			MethodName: "CreateMenu",
			Handler:    _AuthorizationService_CreateMenu_Handler,
		},
		{
			MethodName: "UpdateMenu",
			Handler:    _AuthorizationService_UpdateMenu_Handler,
		},
		{
			MethodName: "DeleteMenu",
			Handler:    _AuthorizationService_DeleteMenu_Handler,
		},
		{
			MethodName: "GetRoleMenuTree",
			Handler:    _AuthorizationService_GetRoleMenuTree_Handler,
		},
		{
			MethodName: "GetRoleMenu",
			Handler:    _AuthorizationService_GetRoleMenu_Handler,
		},
		{
			MethodName: "SaveRoleMenu",
			Handler:    _AuthorizationService_SaveRoleMenu_Handler,
		},
		{
			MethodName: "GetRoleMenuBtn",
			Handler:    _AuthorizationService_GetRoleMenuBtn_Handler,
		},
		{
			MethodName: "SaveRoleMenuBtn",
			Handler:    _AuthorizationService_SaveRoleMenuBtn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authorization/v1/authorization.proto",
}
